append() - 요소 안쪽의 뒤
prepend() - 요소 안쪽의 앞
after() - 요소 바깥의 뒤
before() - 요소 바깥의 앞
remove() - 요소 자체를 삭제
empty() - 요소 안의 내용을 삭제

1. 이미지 크기 만큼 애니메이트 한다.
2. 안보이게 된 첫 번쨰 이미지를 clone() => 복제
3. 요소의 뒷부분에 clone()한 이미지를 붙인다. (appendTo)
4. clone()의 원본인 첫 번쨰 이미지를 삭제한다.
5. style 위치 값을 초기화 한다.

위 1~5 번의 과정을 무한 반복한다. (setInterval())
class 추가: addClass()
class 삭제: removeClass()
class 추가 + 삭제: toggleClass()

class 있는지 확인 : hasClass()

/** 참고 vanilla JS **/
요소.classList.add()
요소.classList.remove()
요소.classList.toggle();
요소.classList.replace("원래이름", "바꿀이름");

웹 80번 포트
mySql 3306번 포트
ftp 21번 포트

1. DBMS - DataBase Mnanagement System
 DB를 관리(Management)하는 시스템(System)
 
- db관리란 db의 유지보수 (검색, 삭제, 추가, 수정)

CRUD(Create, Retrieve, Update, Delete)

- 대량 데이터를 처리하는 시스템
- 다양한 자료구조와 검색구조(소팅, 인덱싱, ...) 사용해 "빠른" 검색 가능
- CRUD ??? R >>>>>>>>>>>CUD
- 검색에 최적화 하는 작업이 가장 중요한 일

정렬
└> 1. 정렬되어 있지 않는 데이터중 원하는 것을 찾을 확률 (데이터의 절반)
	최선: 1, 최악: N === 평균: N/2
     2. 이런 것을 방지하기 위해 정렬이 필요 (퀵정렬 / 힙정렬) 주로 사용



인덱스(index)
└> 인덱스의 종류: 
	- 이진검색(Binary Search)
	
1,000개의 데이터중 원하는 데이터를 찾을 떄 최대 검색 수  2의n승 > 1000 (n = 10)
이론적으로 10번 안에 찾을 수 있음.

DBMS의 종류
- 계층형 데이터베이스
- 네트워크형 데이터베이스
- 관계형 데이터베이스(RDBMS)
└> 테이블 기반의 DBMS
└> 테이블 - 컬럼 형태의 데이터 저장 방식
└> 테블과 테이블의 연관관계(외래키)를 이용해 필요한 정보를 구한다.
└> 모델링은 E-R(Entity Relationship) 모델을 사용

RDBMS의 특징
 - 데이터를 테이블 단위로 관리
   └>하나의 테이블은 여러 개의 컬럼으로 구성

 - 테이블끼리의 중복 정보는 최소화 시킴
   └>동일한 데이터가 여러군데 중복되어 존재하면 데이터의 수정 시 문제 발생 확률이 높아짐
    └>정규화(Normalize => 정규형)
 - 사용방식
    └> 여러 테이블을 합쳐 큰 테이블을 생성(join)해서 필요한 정보를 찾아내는 방식

RDBMS 기본용어
- 스키마 : Databasem 테입르의 정의 내역
- SQL 쿼리(SQL Query)
 └> 관계형 DBMS를 사용하는 전용 질의 언어
 └> 대소문자 가리지 않음

- 기본키 (Primary Key: PK)
 └>테이블에서 하나의 레코드를 지정할 수 있는 하나 이상의 컬럼 집합
 └> 중복(x), Null(x)

- 외래키 (Foreign Key: FK)
 └>어떤 테이블의 기본키가 다른 테이블의 컬럼에 들어 있는 경우
- 테이블
 └> 정보들의 묶음 단위

- 컬럼(Column)
 └> 테이블을 구성하는 정보들(학생테이블 - 이름, 주소, 전화번호, 나이...)

- 레코드(Record)
 └> 테이블에 들어 있는 여러가지 인스턴스 하나하나를 지정

- 도메인값(Domain Value)
└> 각 컬럼에서 나올 수 있는 후보 값


- 객체지향 데이터베이스
- 객체관계형 데이터베이스(ORDEMS)
- NoSQL (Not Only SQM)

show databases; => 유 리스트 표시
use 데이터베이스이름; => 선택한 데이터베이스를 사용한다
show tables; => 선택한 데이터베이스 안에 있는 테이블을 표시
desc 테이블이름 => 선택한 테이블의 구조를 표시
select * from 테이블 이름 => 선택한 테이블의 내용을 표시
quit 또는 exit => 접속 종료























